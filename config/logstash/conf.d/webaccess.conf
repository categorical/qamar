



input {
    file {
        path => ["/opt/rsyslog/nginx/nginx.access.log"]
        #path => ["/opt/rsyslog/nginx/debugaccess"]
        exclude => ["*.gz"]
        #start_position => "start"
        sincedb_path => "/var/spool/logstash/sincedb_webaccess"
        sincedb_write_interval => 60
        stat_interval => 5
        discover_interval => 30
        codec => "plain"
        #delimiter => "\n"
        type => "webaccess"
    }
}
filter {
    grok {
        match => {
            "message" => "%{IP:server} %{NOTSPACE:servername} %{IP:clientip} - (?:%{USERNAME:ident}|-) \[%{HTTPDATE:timestamp}\] \"%{WORD:verb} %{NOTSPACE:request} HTTP/%{NUMBER:httpversion}\" %{NUMBER:response:int} (?:%{NUMBER:bytes:int}|-) %{QS:referrer} \"(?:%{GREEDYDATA:agent})\" \"%{GREEDYDATA:xforwardedfor}\" %{IPORHOST:domain} %{NUMBER:requesttime:float} (?:%{NUMBER:upstreamresponsetime:float}|-) %{WORD:scheme} \"(?:%{NUMBER:userid:int}|-|)\" \"(?:%{NOTSPACE:deviceid}|-)\" (?:%{BASE16NUM:uidsetgot}|-) \"(?:%{NOTSPACE:uidbase64}|-)\""
            "xforwardedfor" => "(?:%{IP:clientrealip}|-)"
            "request" => "%{URIPATH:requestpath}(?:%{URIPARAM:requestquery})?"
            "referrer" => "^\"(?:%{URI:referrer}|%{DATA})\"$"
        }
        keep_empty_captures => true
        remove_field => ["port","host","path","message"]
        break_on_match => false
    }
    ruby {
        code => "event['clientrealip']=event['clientrealip'] || event['clientip']"
    }
    ruby {
        code => "event['referrer']=event['referrer'][1]"
    }
    if [request] =~ /^\/v2\/breakingnews\/rollpolling|^\/v2\/livenews\/realtime|^\/v2\/livenews\/unread-count/
        or [request] =~ /^\/v2\/policies\/return/
        or [request] =~ /^\/v2\/itn\/token\/public/
        or [request] =~ /^\/v2\/messagecenter\/polling/
        or [request] =~ /^\/v2\/messagecenter\/messages\/unread/
        or ([request] =~ /^\/logincheck/ and [domain] == "admin.wallstreetcn.com") { 
        drop {}
    }
    if [agent] == "-" {
        ruby {
            code => "event['agent']=nil"
        }
    }
    if [ident] == "-" {
        ruby {
            code => "event['ident']=nil"
        }
    }
    urldecode {
        field => "requestpath"
    }
    mutate {
        rename => {"requestquery" => "[requestquery][_source]"}
    }
    urldecode {
        field => "[requestquery][_source]"
    }
    kv {
        source => "[requestquery][_source]"
        target => "requestquery"
        field_split => "?&;"
        value_split => "="
        allow_duplicate_values => true
        exclude_keys => ["_","_eva_t","_t","hash","callback"]
        trimkey => "\d\[\]"
        trim => ",\s"
    }
    ruby {
        code => "
            event['requestquery']=event['requestquery'].select{|k,v|k=~/^\w{1,10}$/}
        "
    }
    date {
        match => ["timestamp", "dd/MMM/yyyy:HH:mm:ss Z"]
        timezone => "Asia/Harbin"
    }
    geoip {
        source => "clientrealip"
        database => "/opt/ip/GeoLiteCity.dat"
    }
    mutate {
        rename => {"agent" => "[agent][_source]"}
    }
    useragent {
        source => "[agent][_source]"
        target => "agent"
    }
}
output {
    elasticsearch {
        action => "index"
        protocol => "http"
        host => ["wscn-log2"]
        port => 13817
        #port => 8801
        cluster => "webaccess"
        flush_size => 5000
        workers => 5
    }
    #stdout { codec => json }
    #stdout { codec => rubydebug }
}

