



input {
    file {
        #path => ["/opt/rsyslog/nginx/debugcollect"]
        #start_position => "beginning"
        path => ["/opt/rsyslog/nginx/nginx.access.collect.log"]
        exclude => ["*.gz"]
        sincedb_path => "/var/spool/logstash/sincedb_collect"
        sincedb_write_interval => 60
        stat_interval => 5
        discover_interval => 30
        codec => "plain"
        #delimiter => "\n"
        type => "collect"
    }
}
filter {
    grok {
        match => {
            "message" => "%{IP:server} %{NOTSPACE:servername} %{IP:clientip} - (?:%{USERNAME:ident}|-) \[%{HTTPDATE:timestamp}\] \"%{WORD:verb} %{NOTSPACE:request} HTTP/%{NUMBER:httpversion}\" %{NUMBER:response:int} (?:%{NUMBER:bytes:int}|-) %{QS:referrer} \"(?:%{GREEDYDATA:agent})\" \"%{GREEDYDATA:xforwardedfor}\" %{IPORHOST:domain} %{NUMBER:requesttime:float} (?:%{NUMBER:upstreamresponsetime:float}|-) %{WORD:scheme} \"(?:%{NUMBER:userid:int}|-)\" \"(?:%{NOTSPACE:deviceid}|-)\" \"(?:%{DATA:device}|-)\" \"(?:%{NOTSPACE:uidbase64}|-)\" (?:%{NOTSPACE:hitbase64}|-)"
            "xforwardedfor" => "(?:%{IP:clientrealip}|-)"
            "request" => "%{URIPATH:requestpath}(?:%{URIPARAM:requestquery})?"
            "referrer" => "^\"(?:%{URI:referrer}|%{DATA})\"$"
        }
        keep_empty_captures => true
        remove_field => ["port","host","path","message"]
        break_on_match => false
    }
    ruby {
        init => "require 'base64'"
        code => "event['hitjson']=Base64.decode64(event['hitbase64'])"
    }
    json {
        source => "hitjson"
        target => "hits"
    }
    mutate {
        remove_field => ["hitjson"]
    }
    
    ruby {
        code => "event['clientrealip']=event['clientrealip'] || event['clientip']"
    }
    ruby {
        code => "event['referrer']=event['referrer'][1]"
    }
    if [deviceid] == "-" {
        ruby { code => "event['deviceid']=nil" }
    }
    if [xforwardedfor] == "-" {
        ruby { code => "event['xforwardedfor']=nil" }
    }
    if [agent] == "-" {
        ruby { code => "event['agent']=nil" }
    }
    if [ident] == "-" {
        ruby { code => "event['ident']=nil" }
    }
    urldecode {
        field => "requestpath"
    }
    mutate {
        rename => {"requestquery" => "[requestquery][_source]"}
    }
    urldecode {
        field => "[requestquery][_source]"
    }
    kv {
        source => "[requestquery][_source]"
        target => "requestquery"
        field_split => "?&;"
        value_split => "="
        allow_duplicate_values => true
        exclude_keys => ["_","_eva_t","_t","hash","callback"]
        trimkey => "\d\[\]"
        trim => ",\s"
    }
    ruby {
        code => "
            event['requestquery']=event['requestquery'].select{|k,v|k=~/^\w{1,10}$/}
        "
    }
    date {
        match => ["timestamp", "dd/MMM/yyyy:HH:mm:ss Z"]
        timezone => "Asia/Harbin"
    }
    geoip {
        source => "clientrealip"
        database => "/opt/ip/GeoLiteCity.dat"
    }
    mutate {
        rename => {"agent" => "[agent][_source]"}
    }
    useragent {
        source => "[agent][_source]"
        target => "agent"
    }
}
output {
    elasticsearch {
        action => "index"
        protocol => "http"
        host => ["wscn-log4"]
        port => 33817
        cluster => "collect"
        flush_size => 5000
        workers => 3
    }
    #stdout { codec => json }
    #stdout { codec => rubydebug }
}

