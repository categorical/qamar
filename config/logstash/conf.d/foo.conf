
input { 
    #stdin {}
    file {
        path => ["/var/log/nginx/access.log"]
        exclude => ["*.gz"]
        start_position => "beginning"
        sincedb_path => "/var/logstash/data/foo.sincedb"
        sincedb_write_interval => 60
        stat_interval => 5
        discover_interval => 30
        codec => "plain"
        #delimiter => "\n"
        type => "foo" 
    }
}

filter {
    grok {
        match => {
            "message" => "%{IP:clientip} - (?:%{USERNAME:ident}|-) \[%{HTTPDATE:timestamp}\] \"%{WORD:verb} %{NOTSPACE:request} HTTP/%{NUMBER:httpversion}\" %{NUMBER:response:int} (?:%{NUMBER:bytes:int}|-) %{QS:referrer} \"(?:%{GREEDYDATA:agent})\""
            "request" => "%{URIPATH:requestpath}(?:%{URIPARAM:requestquery})?"
            "referrer" => "^\"(?:%{URI:referrer}|%{DATA})\"$"
        }
        keep_empty_captures => true
        remove_field => ["port","host","path","message"]
        break_on_match => false
    }
    ruby {
        code => "event.set('referrer',event.get('referrer')[1])"
    }
    if [agent] == "-" {
        ruby {
            code => "event.set('agent',nil)"
        }
    }
    if [ident] == "-" {
        ruby {
            code => "event.set('ident',nil)"
        }
    }
    urldecode {
        field => "requestpath"
    }
    mutate {
        rename => {"requestquery" => "[requestquery][_source]"}
    }
    urldecode {
        field => "[requestquery][_source]"
    }
    kv {
        source => "[requestquery][_source]"
        target => "requestquery"
        field_split => "?&;"
        value_split => "="
        allow_duplicate_values => true
        exclude_keys => ["_","hash","callback"]
        trim_key => "\d\[\]"
        trim_value => ",\s"
    }
    ruby {
        code => "
            event.set('requestquery',event.get('requestquery').select{|k,v|k=~/^\w{1,10}$/})
        "
    }
    date {
        match => ["timestamp", "dd/MMM/yyyy:HH:mm:ss Z"]
        timezone => "Asia/Harbin"
    }
    mutate {
        rename => {"agent" => "[agent][_source]"}
    }
    useragent {
        source => "[agent][_source]"
        target => "agent"
    }
}

output {
    #elasticsearch {
    #    action => "index"
    #    protocol => "http"
    #    host => ["127.0.0.1"]
    #    port => 63200
    #    cluster => "local2"
    #    flush_size => 200
    #    index => logstash-%{+xxxx.ww}
    #    workers => 2
    #}
    #stdout { codec => json }
    stdout { codec => rubydebug }
}


